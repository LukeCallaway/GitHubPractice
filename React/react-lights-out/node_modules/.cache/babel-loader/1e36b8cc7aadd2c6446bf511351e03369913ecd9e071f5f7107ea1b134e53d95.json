{"ast":null,"code":"var _jsxFileName = \"/home/lacallaway98/Springboard/react/react-lights-out/src/Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board({\n  nrows,\n  ncols,\n  chanceLightStartsOn\n}) {\n  _s();\n  const [board, setBoard] = useState(createBoard());\n  function isLightOn() {\n    if (Math.floor(Math.random() * 100 + 1) < chanceLightStartsOn) {\n      return false;\n    }\n    return true;\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    // TODO: create array-of-arrays of true/false values\n    for (let i = 0; i < nrows; i++) {\n      initialBoard.push([]);\n      for (let j = 0; j < ncols; j++) {\n        initialBoard[i].push( /*#__PURE__*/_jsxDEV(Cell, {\n          isLit: isLightOn ? true : false,\n          flipCellsAroundMe: flipCellsAround\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 30\n        }, this));\n        // initialBoard[i].push(isLightOn())\n      }\n    }\n    return initialBoard;\n  }\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n  }\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n      const deepCopy = oldBoard.map(element => Array.isArray(element) ? oldBoard.map(elementTwo => elementTwo) : element);\n\n      // TODO: in the copy, flip this cell and the cells around it\n\n      // TODO: return the copy\n      return deepCopy;\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  // TODO\n\n  // make table board\n\n  // TODO\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: board\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 10\n  }, this);\n  // <table>\n  //   <tbody>\n  //     {board.map(row => Array.isArray(row) ?  row.map(c => <tr></tr>):  )}\n  //   </tbody>\n  // </table>\n}\n_s(Board, \"yXCiZuNsR4bhCVCHatAq6sPGYak=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Cell","jsxDEV","_jsxDEV","Board","nrows","ncols","chanceLightStartsOn","_s","board","setBoard","createBoard","isLightOn","Math","floor","random","initialBoard","i","push","j","isLit","flipCellsAroundMe","flipCellsAround","fileName","_jsxFileName","lineNumber","columnNumber","hasWon","coord","oldBoard","y","x","split","map","Number","flipCell","boardCopy","deepCopy","element","Array","isArray","elementTwo","children","_c","$RefreshReg$"],"sources":["/home/lacallaway98/Springboard/react/react-lights-out/src/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows, ncols, chanceLightStartsOn }) {\n  const [board, setBoard] = useState(createBoard());\n\n  function isLightOn(){\n    if((Math.floor(Math.random() * 100 + 1)) < chanceLightStartsOn){\n      return false\n    } return true\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    // TODO: create array-of-arrays of true/false values\n    for(let i = 0; i < nrows; i++){\n      initialBoard.push([])\n      for(let j = 0; j < ncols; j++){\n        initialBoard[i].push(<Cell isLit={isLightOn ? true : false} flipCellsAroundMe={flipCellsAround}/>)\n        // initialBoard[i].push(isLightOn())\n      }\n    }\n    return initialBoard;\n  }\n\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n      const deepCopy = oldBoard.map(element => Array.isArray(element) ? oldBoard.map(elementTwo => elementTwo) : element)\n\n      // TODO: in the copy, flip this cell and the cells around it\n\n      // TODO: return the copy\n      return deepCopy\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  // TODO\n\n  // make table board\n\n  // TODO\n  return <h1>{board}</h1>\n    // <table>\n    //   <tbody>\n    //     {board.map(row => Array.isArray(row) ?  row.map(c => <tr></tr>):  )}\n    //   </tbody>\n    // </table>\n  \n}\n\nexport default Board;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAO,aAAa;;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA,SAAAC,MAAA,IAAAC,OAAA;AAyBA,SAASC,KAAKA,CAAC;EAAEC,KAAK;EAAEC,KAAK;EAAEC;AAAoB,CAAC,EAAE;EAAAC,EAAA;EACpD,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAACW,WAAW,CAAC,CAAC,CAAC;EAEjD,SAASC,SAASA,CAAA,EAAE;IAClB,IAAIC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,GAAIR,mBAAmB,EAAC;MAC7D,OAAO,KAAK;IACd;IAAE,OAAO,IAAI;EACf;;EAEA;EACA,SAASI,WAAWA,CAAA,EAAG;IACrB,IAAIK,YAAY,GAAG,EAAE;IACrB;IACA,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGZ,KAAK,EAAEY,CAAC,EAAE,EAAC;MAC5BD,YAAY,CAACE,IAAI,CAAC,EAAE,CAAC;MACrB,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,KAAK,EAAEa,CAAC,EAAE,EAAC;QAC5BH,YAAY,CAACC,CAAC,CAAC,CAACC,IAAI,eAACf,OAAA,CAACF,IAAI;UAACmB,KAAK,EAAER,SAAS,GAAG,IAAI,GAAG,KAAM;UAACS,iBAAiB,EAAEC;QAAgB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC,CAAC;QAClG;MACF;IACF;IACA,OAAOV,YAAY;EACrB;EAEA,SAASW,MAAMA,CAAA,EAAG;IAChB;EAAA;EAGF,SAASL,eAAeA,CAACM,KAAK,EAAE;IAC9BlB,QAAQ,CAACmB,QAAQ,IAAI;MACnB,MAAM,CAACC,CAAC,EAAEC,CAAC,CAAC,GAAGH,KAAK,CAACI,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,MAAM,CAAC;MAE3C,MAAMC,QAAQ,GAAGA,CAACL,CAAC,EAAEC,CAAC,EAAEK,SAAS,KAAK;QAEpC;QACA,IAAIL,CAAC,IAAI,CAAC,IAAIA,CAAC,GAAGzB,KAAK,IAAIwB,CAAC,IAAI,CAAC,IAAIA,CAAC,GAAGzB,KAAK,EAAE;UAC9C+B,SAAS,CAACN,CAAC,CAAC,CAACC,CAAC,CAAC,GAAG,CAACK,SAAS,CAACN,CAAC,CAAC,CAACC,CAAC,CAAC;QACpC;MACF,CAAC;;MAED;MACA,MAAMM,QAAQ,GAAGR,QAAQ,CAACI,GAAG,CAACK,OAAO,IAAIC,KAAK,CAACC,OAAO,CAACF,OAAO,CAAC,GAAGT,QAAQ,CAACI,GAAG,CAACQ,UAAU,IAAIA,UAAU,CAAC,GAAGH,OAAO,CAAC;;MAEnH;;MAEA;MACA,OAAOD,QAAQ;IACjB,CAAC,CAAC;EACJ;;EAEA;;EAEA;;EAEA;;EAEA;EACA,oBAAOlC,OAAA;IAAAuC,QAAA,EAAKjC;EAAK;IAAAc,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EACrB;EACA;EACA;EACA;EACA;AAEJ;AAAClB,EAAA,CA/DQJ,KAAK;AAAAuC,EAAA,GAALvC,KAAK;AAiEd,eAAeA,KAAK;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
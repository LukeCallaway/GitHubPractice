{"ast":null,"code":"var _jsxFileName = \"/home/lacallaway98/Springboard/react/react-lights-out/src/Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board({\n  nrows,\n  ncols,\n  chanceLightStartsOn\n}) {\n  _s();\n  const [board, setBoard] = useState(createBoard());\n  function isLightOn() {\n    if (Math.floor(Math.random() * 100 + 1) < chanceLightStartsOn) {\n      return false;\n    }\n    return true;\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n\n    // TODO: create array-of-arrays of true/false values\n    for (let i = 0; i < nrows; i++) {\n      initialBoard.push([]);\n      for (let j = 0; j < ncols; j++) {\n        initialBoard[i].push(isLightOn());\n      }\n    }\n    return initialBoard;\n  }\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    // board.map(e => e.map(e2 => e.isLit = false ? false : ) : )\n    return board.every(row => row.every(cell => !cell));\n  }\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n      const deepCopy = oldBoard.map(row => [...row]);\n\n      // TODO: in the copy, flip this cell and the cells around it\n      // check all cells around the clicked cell\n      flipCell(y, x, deepCopy);\n      flipCell(y, x - 1, deepCopy);\n      flipCell(y, x + 1, deepCopy);\n      flipCell(y - 1, x, deepCopy);\n      flipCell(y + 1, x, deepCopy);\n\n      // TODO: return the copy\n      return deepCopy;\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  // TODO\n\n  // make table board\n\n  // TODO\n\n  if (hasWon()) {\n    // change to winning conditions once there\n    return \"you win!\";\n  }\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: board.map((row, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: row.map((col, j) => /*#__PURE__*/_jsxDEV(Cell, {\n          x: j,\n          y: i,\n          isLit: col === true ? true : false,\n          flipCellsAroundMe: flipCellsAround\n        }, `${j}, ${i}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 7\n  }, this);\n}\n_s(Board, \"yXCiZuNsR4bhCVCHatAq6sPGYak=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Cell","jsxDEV","_jsxDEV","Board","nrows","ncols","chanceLightStartsOn","_s","board","setBoard","createBoard","isLightOn","Math","floor","random","initialBoard","i","push","j","hasWon","every","row","cell","flipCellsAround","coord","oldBoard","y","x","split","map","Number","flipCell","boardCopy","deepCopy","children","col","isLit","flipCellsAroundMe","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/lacallaway98/Springboard/react/react-lights-out/src/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows, ncols, chanceLightStartsOn }) {\n  const [board, setBoard] = useState(createBoard());\n\n  function isLightOn(){\n    if((Math.floor(Math.random() * 100 + 1)) < chanceLightStartsOn){\n      return false\n    } return true\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n\n    // TODO: create array-of-arrays of true/false values\n    for(let i = 0; i < nrows; i++){\n      initialBoard.push([])\n      for(let j = 0; j < ncols; j++){\n        initialBoard[i].push(isLightOn())\n      }\n    }\n    return initialBoard;\n  }\n\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    // board.map(e => e.map(e2 => e.isLit = false ? false : ) : )\n    return board.every(row => row.every(cell => !cell));\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n      const deepCopy = oldBoard.map(row => [...row]);\n\n      // TODO: in the copy, flip this cell and the cells around it\n      // check all cells around the clicked cell\n      flipCell(y, x, deepCopy)\n      flipCell(y, x - 1, deepCopy)\n      flipCell(y, x + 1, deepCopy)\n      flipCell(y - 1, x, deepCopy)\n      flipCell(y + 1, x, deepCopy)\n\n      // TODO: return the copy\n      return deepCopy\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  // TODO\n\n  // make table board\n\n  // TODO\n\n    if(hasWon()){ // change to winning conditions once there\n      return \"you win!\" \n    }\n    return (\n      <table>\n      <tbody>\n        {board.map((row, i) => \n          <tr> \n            {row.map((col, j) => \n                <Cell \n                  key = {`${j}, ${i}`}\n                  x = {j}\n                  y = {i}\n                  isLit={col === true ? true : false} \n                  flipCellsAroundMe={flipCellsAround}\n                />\n              )\n            }\n          </tr>\n        )}\n      </tbody>\n    </table>\n    )\n}\n\nexport default Board;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}